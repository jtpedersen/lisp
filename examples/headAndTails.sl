(head (list 1 2))
(tail (list 1 "hest"))
(+ (head (list 1 2)) (tail (list 2 1)))
(head (list (list a b) "hest" ))
(tail (list (list a b) "hest" ))
(head (list + -)) 
(eval (list + 1 2))
(list (head (list "hest")))
(eval (pprint(join (list +) (list 2 3))))
(define (x) (+ 1 2 y))
(define y 2)
(+ y y)
(define (square x) (* x x))
(define (f n acc) (if n (pprint (f (- n 1) (square acc))) acc))
(f 4 2)
(define (isFour x) (= x 4))
(isFour 2)
(isFour 4)
(define (fib x) (if (<= x 2) x (+ (fib (- x 1)) (fib (- x 2)))))
(fib 2)
(fib 3)
(fib 4)
(define (fac x) (if (= x 1) 1 (* x (fac (- x 1)))))
(fac 2)
(fac 4)
(fac 14)
(if (list) "A" 3)
